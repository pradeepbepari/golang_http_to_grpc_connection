// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v3.12.4
// source: cmd/proto/university.proto

package proto

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type UniversityRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Name            string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Country         string                 `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	Email           string                 `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Password        string                 `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	Contact         string                 `protobuf:"bytes,5,opt,name=contact,proto3" json:"contact,omitempty"`
	Ranking         int32                  `protobuf:"varint,6,opt,name=ranking,proto3" json:"ranking,omitempty"`
	Logo            string                 `protobuf:"bytes,7,opt,name=logo,proto3" json:"logo,omitempty"`
	Location        string                 `protobuf:"bytes,8,opt,name=location,proto3" json:"location,omitempty"`
	Website         string                 `protobuf:"bytes,9,opt,name=website,proto3" json:"website,omitempty"`
	EstablishedYear int32                  `protobuf:"varint,10,opt,name=established_year,json=establishedYear,proto3" json:"established_year,omitempty"`
	Programs        []string               `protobuf:"bytes,11,rep,name=programs,proto3" json:"programs,omitempty"`
	Colleges        []string               `protobuf:"bytes,12,rep,name=colleges,proto3" json:"colleges,omitempty"`
	City            string                 `protobuf:"bytes,13,opt,name=city,proto3" json:"city,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UniversityRequest) Reset() {
	*x = UniversityRequest{}
	mi := &file_cmd_proto_university_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UniversityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniversityRequest) ProtoMessage() {}

func (x *UniversityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_proto_university_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniversityRequest.ProtoReflect.Descriptor instead.
func (*UniversityRequest) Descriptor() ([]byte, []int) {
	return file_cmd_proto_university_proto_rawDescGZIP(), []int{0}
}

func (x *UniversityRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UniversityRequest) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *UniversityRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UniversityRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UniversityRequest) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *UniversityRequest) GetRanking() int32 {
	if x != nil {
		return x.Ranking
	}
	return 0
}

func (x *UniversityRequest) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *UniversityRequest) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *UniversityRequest) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *UniversityRequest) GetEstablishedYear() int32 {
	if x != nil {
		return x.EstablishedYear
	}
	return 0
}

func (x *UniversityRequest) GetPrograms() []string {
	if x != nil {
		return x.Programs
	}
	return nil
}

func (x *UniversityRequest) GetColleges() []string {
	if x != nil {
		return x.Colleges
	}
	return nil
}

func (x *UniversityRequest) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

type UniversityResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Name            string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Country         string                 `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	Email           string                 `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Password        string                 `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	Contact         string                 `protobuf:"bytes,5,opt,name=contact,proto3" json:"contact,omitempty"`
	Ranking         int32                  `protobuf:"varint,6,opt,name=ranking,proto3" json:"ranking,omitempty"`
	Id              string                 `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`
	CreatedAt       *timestamp.Timestamp   `protobuf:"bytes,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt       *timestamp.Timestamp   `protobuf:"bytes,9,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	Logo            string                 `protobuf:"bytes,10,opt,name=logo,proto3" json:"logo,omitempty"`
	Location        string                 `protobuf:"bytes,11,opt,name=location,proto3" json:"location,omitempty"`
	Website         string                 `protobuf:"bytes,12,opt,name=website,proto3" json:"website,omitempty"`
	EstablishedYear int32                  `protobuf:"varint,13,opt,name=established_year,json=establishedYear,proto3" json:"established_year,omitempty"`
	Programes       []string               `protobuf:"bytes,14,rep,name=programes,proto3" json:"programes,omitempty"`
	Colleges        []string               `protobuf:"bytes,15,rep,name=colleges,proto3" json:"colleges,omitempty"`
	City            string                 `protobuf:"bytes,16,opt,name=city,proto3" json:"city,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UniversityResponse) Reset() {
	*x = UniversityResponse{}
	mi := &file_cmd_proto_university_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UniversityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniversityResponse) ProtoMessage() {}

func (x *UniversityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_proto_university_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniversityResponse.ProtoReflect.Descriptor instead.
func (*UniversityResponse) Descriptor() ([]byte, []int) {
	return file_cmd_proto_university_proto_rawDescGZIP(), []int{1}
}

func (x *UniversityResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UniversityResponse) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *UniversityResponse) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UniversityResponse) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UniversityResponse) GetContact() string {
	if x != nil {
		return x.Contact
	}
	return ""
}

func (x *UniversityResponse) GetRanking() int32 {
	if x != nil {
		return x.Ranking
	}
	return 0
}

func (x *UniversityResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UniversityResponse) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *UniversityResponse) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *UniversityResponse) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

func (x *UniversityResponse) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *UniversityResponse) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *UniversityResponse) GetEstablishedYear() int32 {
	if x != nil {
		return x.EstablishedYear
	}
	return 0
}

func (x *UniversityResponse) GetProgrames() []string {
	if x != nil {
		return x.Programes
	}
	return nil
}

func (x *UniversityResponse) GetColleges() []string {
	if x != nil {
		return x.Colleges
	}
	return nil
}

func (x *UniversityResponse) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

type ListUniversityRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pagination    *Pagination            `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUniversityRequest) Reset() {
	*x = ListUniversityRequest{}
	mi := &file_cmd_proto_university_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUniversityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUniversityRequest) ProtoMessage() {}

func (x *ListUniversityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_proto_university_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUniversityRequest.ProtoReflect.Descriptor instead.
func (*ListUniversityRequest) Descriptor() ([]byte, []int) {
	return file_cmd_proto_university_proto_rawDescGZIP(), []int{2}
}

func (x *ListUniversityRequest) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type ListUniversityResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	University    []*UniversityResponse  `protobuf:"bytes,1,rep,name=university,proto3" json:"university,omitempty"`
	Total         int64                  `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
	Pagination    *Pagination            `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUniversityResponse) Reset() {
	*x = ListUniversityResponse{}
	mi := &file_cmd_proto_university_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUniversityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUniversityResponse) ProtoMessage() {}

func (x *ListUniversityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_proto_university_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUniversityResponse.ProtoReflect.Descriptor instead.
func (*ListUniversityResponse) Descriptor() ([]byte, []int) {
	return file_cmd_proto_university_proto_rawDescGZIP(), []int{3}
}

func (x *ListUniversityResponse) GetUniversity() []*UniversityResponse {
	if x != nil {
		return x.University
	}
	return nil
}

func (x *ListUniversityResponse) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ListUniversityResponse) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type UniversityByIdRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UniversityByIdRequest) Reset() {
	*x = UniversityByIdRequest{}
	mi := &file_cmd_proto_university_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UniversityByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniversityByIdRequest) ProtoMessage() {}

func (x *UniversityByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_proto_university_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniversityByIdRequest.ProtoReflect.Descriptor instead.
func (*UniversityByIdRequest) Descriptor() ([]byte, []int) {
	return file_cmd_proto_university_proto_rawDescGZIP(), []int{4}
}

func (x *UniversityByIdRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UniversityByEmailRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Email         string                 `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UniversityByEmailRequest) Reset() {
	*x = UniversityByEmailRequest{}
	mi := &file_cmd_proto_university_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UniversityByEmailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniversityByEmailRequest) ProtoMessage() {}

func (x *UniversityByEmailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_proto_university_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniversityByEmailRequest.ProtoReflect.Descriptor instead.
func (*UniversityByEmailRequest) Descriptor() ([]byte, []int) {
	return file_cmd_proto_university_proto_rawDescGZIP(), []int{5}
}

func (x *UniversityByEmailRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type UniversityByNameRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UniversityByNameRequest) Reset() {
	*x = UniversityByNameRequest{}
	mi := &file_cmd_proto_university_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UniversityByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniversityByNameRequest) ProtoMessage() {}

func (x *UniversityByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_proto_university_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniversityByNameRequest.ProtoReflect.Descriptor instead.
func (*UniversityByNameRequest) Descriptor() ([]byte, []int) {
	return file_cmd_proto_university_proto_rawDescGZIP(), []int{6}
}

func (x *UniversityByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Pagination struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Page          int32                  `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit         int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pagination) Reset() {
	*x = Pagination{}
	mi := &file_cmd_proto_university_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pagination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pagination) ProtoMessage() {}

func (x *Pagination) ProtoReflect() protoreflect.Message {
	mi := &file_cmd_proto_university_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pagination.ProtoReflect.Descriptor instead.
func (*Pagination) Descriptor() ([]byte, []int) {
	return file_cmd_proto_university_proto_rawDescGZIP(), []int{7}
}

func (x *Pagination) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *Pagination) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

var File_cmd_proto_university_proto protoreflect.FileDescriptor

var file_cmd_proto_university_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x63, 0x6d, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x75, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70,
	0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xc3, 0x05, 0x0a, 0x11, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0x55, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x27, 0x73, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x92, 0x41, 0x0d, 0x32, 0x0b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x20, 0x49, 0x53, 0x4f, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x2c, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0x55, 0x6e, 0x69, 0x76, 0x72, 0x73, 0x69, 0x74, 0x79, 0x27,
	0x73, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x35,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x19, 0x92, 0x41, 0x16, 0x32, 0x14, 0x55, 0x6e, 0x69, 0x76, 0x72, 0x73, 0x69, 0x74, 0x79,
	0x27, 0x73, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x39, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92, 0x41, 0x1c, 0x32, 0x1a, 0x55, 0x6e, 0x69,
	0x76, 0x72, 0x73, 0x69, 0x74, 0x79, 0x27, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x12, 0x32, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x18, 0x92, 0x41, 0x15, 0x32, 0x13, 0x55, 0x6e, 0x69, 0x76, 0x72, 0x73, 0x69, 0x74,
	0x79, 0x27, 0x73, 0x20, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x72, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x74, 0x79, 0x27, 0x73, 0x20, 0x6c, 0x6f, 0x67, 0x6f, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f,
	0x12, 0x36, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32, 0x15, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x74, 0x79, 0x27, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x73,
	0x69, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32, 0x15,
	0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x27, 0x73, 0x20, 0x20, 0x77, 0x65,
	0x62, 0x73, 0x69, 0x74, 0x65, 0x52, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x4d,
	0x0a, 0x10, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x79, 0x65,
	0x61, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x32, 0x1d, 0x75,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x27, 0x73, 0x20, 0x65, 0x73, 0x74, 0x61,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x52, 0x0f, 0x65, 0x73,
	0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x59, 0x65, 0x61, 0x72, 0x12, 0x37, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x42,
	0x1b, 0x92, 0x41, 0x18, 0x32, 0x16, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79,
	0x27, 0x73, 0x20, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x67, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x67,
	0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x32, 0x16, 0x75,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x27, 0x73, 0x20, 0x20, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x67, 0x65, 0x73, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92,
	0x41, 0x10, 0x32, 0x0e, 0x55, 0x6e, 0x69, 0x76, 0x72, 0x73, 0x69, 0x74, 0x79, 0x20, 0x63, 0x69,
	0x74, 0x79, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x22, 0x98, 0x07, 0x0a, 0x12, 0x55, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x92,
	0x41, 0x13, 0x32, 0x11, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x27, 0x73,
	0x20, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0x92, 0x41,
	0x0d, 0x32, 0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x20, 0x49, 0x53, 0x4f, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0x55, 0x6e, 0x69,
	0x76, 0x72, 0x73, 0x69, 0x74, 0x79, 0x27, 0x73, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x35, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x32, 0x14, 0x55, 0x6e,
	0x69, 0x76, 0x72, 0x73, 0x69, 0x74, 0x79, 0x27, 0x73, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x39, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1f, 0x92,
	0x41, 0x1c, 0x32, 0x1a, 0x55, 0x6e, 0x69, 0x76, 0x72, 0x73, 0x69, 0x74, 0x79, 0x27, 0x73, 0x20,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x18, 0x92, 0x41, 0x15, 0x32, 0x13, 0x55,
	0x6e, 0x69, 0x76, 0x72, 0x73, 0x69, 0x74, 0x79, 0x27, 0x73, 0x20, 0x72, 0x61, 0x6e, 0x6b, 0x69,
	0x6e, 0x67, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0x55, 0x6e,
	0x69, 0x76, 0x72, 0x73, 0x69, 0x74, 0x79, 0x20, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x56,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1b,
	0x92, 0x41, 0x18, 0x32, 0x16, 0x55, 0x6e, 0x69, 0x76, 0x72, 0x73, 0x69, 0x74, 0x79, 0x27, 0x73,
	0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x20, 0x61, 0x74, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x56, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x32, 0x16, 0x55, 0x6e, 0x69,
	0x76, 0x72, 0x73, 0x69, 0x74, 0x79, 0x27, 0x73, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x20, 0x61, 0x74, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x2a,
	0x0a, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41,
	0x13, 0x32, 0x11, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x27, 0x73, 0x20,
	0x6c, 0x6f, 0x67, 0x6f, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x6f, 0x12, 0x36, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41,
	0x17, 0x32, 0x15, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x27, 0x73, 0x20,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32, 0x15, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x74, 0x79, 0x27, 0x73, 0x20, 0x20, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x52,
	0x07, 0x77, 0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x10, 0x65, 0x73, 0x74, 0x61,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x22, 0x92, 0x41, 0x1f, 0x32, 0x1d, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x74, 0x79, 0x27, 0x73, 0x20, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x52, 0x0f, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x59, 0x65, 0x61, 0x72, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32,
	0x15, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x27, 0x73, 0x20, 0x20, 0x77,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x37, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x18, 0x0f, 0x20,
	0x03, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18, 0x32, 0x16, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x74, 0x79, 0x27, 0x73, 0x20, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x67, 0x65, 0x73,
	0x52, 0x08, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x67, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0x55,
	0x6e, 0x69, 0x76, 0x72, 0x73, 0x69, 0x74, 0x79, 0x20, 0x63, 0x69, 0x74, 0x79, 0x52, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x22, 0x5c, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0a,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x10, 0x92, 0x41, 0x0d, 0x32, 0x0b, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xec, 0x01, 0x0a, 0x16, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x0a,
	0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x19, 0x92, 0x41, 0x16,
	0x32, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0a, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x74, 0x79, 0x12, 0x37, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x20, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x0a, 0x70,
	0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x10, 0x92, 0x41, 0x0d, 0x32, 0x0b, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x3a, 0x0a, 0x15, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x0c, 0x55, 0x6e, 0x69, 0x76,
	0x72, 0x73, 0x69, 0x74, 0x79, 0x20, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x22, 0x48, 0x0a, 0x18,
	0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x42, 0x79, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0x55, 0x6e,
	0x69, 0x76, 0x72, 0x73, 0x69, 0x74, 0x79, 0x27, 0x73, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x44, 0x0a, 0x17, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x74, 0x79, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x29, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x15, 0x92, 0x41, 0x12, 0x32, 0x10, 0x55, 0x6e, 0x69, 0x76, 0x72, 0x73, 0x69, 0x74, 0x79, 0x27,
	0x73, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x57, 0x0a, 0x0a,
	0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0e, 0x92, 0x41, 0x0b, 0x32, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x25,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0f, 0x92,
	0x41, 0x0c, 0x32, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x32, 0x9a, 0x0f, 0x0a, 0x11, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x8d, 0x02, 0x0a, 0x10,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79,
	0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc3, 0x01, 0x92, 0x41, 0xa7, 0x01, 0x0a, 0x0a, 0x55, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x12, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x20, 0x61, 0x20, 0x6e, 0x65, 0x77, 0x20, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74,
	0x79, 0x2a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x74, 0x79, 0x4a, 0x28, 0x0a, 0x03, 0x32, 0x30, 0x31, 0x12, 0x21, 0x0a, 0x1f, 0x55, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x66, 0x75, 0x6c, 0x6c, 0x79, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4a, 0x24, 0x0a,
	0x03, 0x34, 0x30, 0x30, 0x12, 0x1d, 0x0a, 0x1b, 0x42, 0x61, 0x64, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x20, 0x2d, 0x20, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x4a, 0x1e, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x17, 0x0a, 0x15, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x3a, 0x01, 0x2a, 0x22, 0x0d, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x85, 0x02, 0x0a, 0x0e,
	0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x12, 0x1c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xb5, 0x01, 0x92, 0x41,
	0x9d, 0x01, 0x0a, 0x0a, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x12, 0x15,
	0x4c, 0x69, 0x73, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x74, 0x79, 0x4a, 0x1d, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x16, 0x0a, 0x14,
	0x4c, 0x69, 0x73, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x4a, 0x29, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x22, 0x0a, 0x20, 0x42,
	0x61, 0x64, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x2d, 0x20, 0x49, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4a,
	0x1e, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x17, 0x0a, 0x15, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x3a, 0x01, 0x2a, 0x22, 0x09, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x87, 0x02, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbd, 0x01,
	0x92, 0x41, 0xa3, 0x01, 0x0a, 0x0a, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79,
	0x12, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20, 0x61, 0x20, 0x55, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x74, 0x79, 0x2a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x4a, 0x28, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x21,
	0x0a, 0x1f, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x20, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x4a, 0x24, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x1d, 0x0a, 0x1b, 0x42, 0x61, 0x64, 0x20,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x2d, 0x20, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4a, 0x1e, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x17,
	0x0a, 0x15, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x3a, 0x01, 0x2a,
	0x22, 0x0b, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x87, 0x02,
	0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x74, 0x79, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xbd, 0x01, 0x92, 0x41, 0xa3, 0x01, 0x0a, 0x0a,
	0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x12, 0x13, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x20, 0x61, 0x20, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x2a,
	0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74,
	0x79, 0x4a, 0x28, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x21, 0x0a, 0x1f, 0x55, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x66, 0x75,
	0x6c, 0x6c, 0x79, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4a, 0x24, 0x0a, 0x03, 0x34,
	0x30, 0x30, 0x12, 0x1d, 0x0a, 0x1b, 0x42, 0x61, 0x64, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x20, 0x2d, 0x20, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x4a, 0x1e, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x17, 0x0a, 0x15, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x3a, 0x01, 0x2a, 0x22, 0x0b, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x93, 0x02, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x55,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xc4, 0x01, 0x92, 0x41, 0xa9, 0x01, 0x0a, 0x0a, 0x55,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x12, 0x16, 0x47, 0x65, 0x74, 0x20, 0x61,
	0x20, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x20, 0x62, 0x79, 0x20, 0x49,
	0x44, 0x2a, 0x11, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79,
	0x42, 0x79, 0x49, 0x64, 0x4a, 0x2a, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x23, 0x0a, 0x21, 0x55,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x20, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x64,
	0x4a, 0x24, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x1d, 0x0a, 0x1b, 0x42, 0x61, 0x64, 0x20, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x2d, 0x20, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4a, 0x1e, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12, 0x17, 0x0a,
	0x15, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x3a, 0x01, 0x2a, 0x22,
	0x0c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x74, 0x62, 0x79, 0x69, 0x64, 0x12, 0xa2, 0x02,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x42,
	0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x42, 0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xcd, 0x01, 0x92, 0x41, 0xaf, 0x01, 0x0a, 0x0a, 0x55, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x74, 0x79, 0x12, 0x19, 0x47, 0x65, 0x74, 0x20, 0x61, 0x20, 0x55, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x20, 0x62, 0x79, 0x20, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x2a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x42,
	0x79, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x4a, 0x2a, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x23, 0x0a,
	0x21, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x20, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x64, 0x4a, 0x24, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x1d, 0x0a, 0x1b, 0x42, 0x61, 0x64,
	0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x2d, 0x20, 0x49, 0x6e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4a, 0x1e, 0x0a, 0x03, 0x35, 0x30, 0x30, 0x12,
	0x17, 0x0a, 0x15, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a, 0x01,
	0x2a, 0x22, 0x0f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x74, 0x62, 0x79, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x9d, 0x02, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x74, 0x79, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x42, 0x79, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xca, 0x01, 0x92, 0x41, 0xad, 0x01, 0x0a, 0x0a, 0x55, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x12, 0x18, 0x47, 0x65, 0x74, 0x20, 0x61, 0x20,
	0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x20, 0x62, 0x79, 0x20, 0x6e, 0x61,
	0x6d, 0x65, 0x2a, 0x13, 0x47, 0x65, 0x74, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74,
	0x79, 0x42, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x4a, 0x2a, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x23,
	0x0a, 0x21, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x69, 0x74, 0x79, 0x20, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x20, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65,
	0x76, 0x65, 0x64, 0x4a, 0x24, 0x0a, 0x03, 0x34, 0x30, 0x30, 0x12, 0x1d, 0x0a, 0x1b, 0x42, 0x61,
	0x64, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x2d, 0x20, 0x49, 0x6e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x20, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4a, 0x1e, 0x0a, 0x03, 0x35, 0x30, 0x30,
	0x12, 0x17, 0x0a, 0x15, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x3a,
	0x01, 0x2a, 0x22, 0x0e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x74, 0x62, 0x79, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cmd_proto_university_proto_rawDescOnce sync.Once
	file_cmd_proto_university_proto_rawDescData = file_cmd_proto_university_proto_rawDesc
)

func file_cmd_proto_university_proto_rawDescGZIP() []byte {
	file_cmd_proto_university_proto_rawDescOnce.Do(func() {
		file_cmd_proto_university_proto_rawDescData = protoimpl.X.CompressGZIP(file_cmd_proto_university_proto_rawDescData)
	})
	return file_cmd_proto_university_proto_rawDescData
}

var file_cmd_proto_university_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_cmd_proto_university_proto_goTypes = []any{
	(*UniversityRequest)(nil),        // 0: proto.UniversityRequest
	(*UniversityResponse)(nil),       // 1: proto.UniversityResponse
	(*ListUniversityRequest)(nil),    // 2: proto.ListUniversityRequest
	(*ListUniversityResponse)(nil),   // 3: proto.ListUniversityResponse
	(*UniversityByIdRequest)(nil),    // 4: proto.UniversityByIdRequest
	(*UniversityByEmailRequest)(nil), // 5: proto.UniversityByEmailRequest
	(*UniversityByNameRequest)(nil),  // 6: proto.UniversityByNameRequest
	(*Pagination)(nil),               // 7: proto.Pagination
	(*timestamp.Timestamp)(nil),      // 8: google.protobuf.Timestamp
}
var file_cmd_proto_university_proto_depIdxs = []int32{
	8,  // 0: proto.UniversityResponse.created_at:type_name -> google.protobuf.Timestamp
	8,  // 1: proto.UniversityResponse.updated_at:type_name -> google.protobuf.Timestamp
	7,  // 2: proto.ListUniversityRequest.pagination:type_name -> proto.Pagination
	1,  // 3: proto.ListUniversityResponse.university:type_name -> proto.UniversityResponse
	7,  // 4: proto.ListUniversityResponse.pagination:type_name -> proto.Pagination
	0,  // 5: proto.UniversityService.CreateUniversity:input_type -> proto.UniversityRequest
	2,  // 6: proto.UniversityService.ListUniversity:input_type -> proto.ListUniversityRequest
	0,  // 7: proto.UniversityService.UpdateUniversity:input_type -> proto.UniversityRequest
	0,  // 8: proto.UniversityService.DeleteUniversity:input_type -> proto.UniversityRequest
	4,  // 9: proto.UniversityService.GetUniversityById:input_type -> proto.UniversityByIdRequest
	5,  // 10: proto.UniversityService.GetUniversityByEmail:input_type -> proto.UniversityByEmailRequest
	6,  // 11: proto.UniversityService.GetUniversityByName:input_type -> proto.UniversityByNameRequest
	1,  // 12: proto.UniversityService.CreateUniversity:output_type -> proto.UniversityResponse
	3,  // 13: proto.UniversityService.ListUniversity:output_type -> proto.ListUniversityResponse
	1,  // 14: proto.UniversityService.UpdateUniversity:output_type -> proto.UniversityResponse
	1,  // 15: proto.UniversityService.DeleteUniversity:output_type -> proto.UniversityResponse
	1,  // 16: proto.UniversityService.GetUniversityById:output_type -> proto.UniversityResponse
	1,  // 17: proto.UniversityService.GetUniversityByEmail:output_type -> proto.UniversityResponse
	1,  // 18: proto.UniversityService.GetUniversityByName:output_type -> proto.UniversityResponse
	12, // [12:19] is the sub-list for method output_type
	5,  // [5:12] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_cmd_proto_university_proto_init() }
func file_cmd_proto_university_proto_init() {
	if File_cmd_proto_university_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cmd_proto_university_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cmd_proto_university_proto_goTypes,
		DependencyIndexes: file_cmd_proto_university_proto_depIdxs,
		MessageInfos:      file_cmd_proto_university_proto_msgTypes,
	}.Build()
	File_cmd_proto_university_proto = out.File
	file_cmd_proto_university_proto_rawDesc = nil
	file_cmd_proto_university_proto_goTypes = nil
	file_cmd_proto_university_proto_depIdxs = nil
}
