// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: cmd/proto/university.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UniversityService_CreateUniversity_FullMethodName     = "/proto.UniversityService/CreateUniversity"
	UniversityService_ListUniversity_FullMethodName       = "/proto.UniversityService/ListUniversity"
	UniversityService_UpdateUniversity_FullMethodName     = "/proto.UniversityService/UpdateUniversity"
	UniversityService_DeleteUniversity_FullMethodName     = "/proto.UniversityService/DeleteUniversity"
	UniversityService_GetUniversityById_FullMethodName    = "/proto.UniversityService/GetUniversityById"
	UniversityService_GetUniversityByEmail_FullMethodName = "/proto.UniversityService/GetUniversityByEmail"
	UniversityService_GetUniversityByName_FullMethodName  = "/proto.UniversityService/GetUniversityByName"
)

// UniversityServiceClient is the client API for UniversityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UniversityServiceClient interface {
	CreateUniversity(ctx context.Context, in *UniversityRequest, opts ...grpc.CallOption) (*UniversityResponse, error)
	ListUniversity(ctx context.Context, in *ListUniversityRequest, opts ...grpc.CallOption) (*ListUniversityResponse, error)
	UpdateUniversity(ctx context.Context, in *UniversityRequest, opts ...grpc.CallOption) (*UniversityResponse, error)
	DeleteUniversity(ctx context.Context, in *UniversityRequest, opts ...grpc.CallOption) (*UniversityResponse, error)
	GetUniversityById(ctx context.Context, in *UniversityByIdRequest, opts ...grpc.CallOption) (*UniversityResponse, error)
	GetUniversityByEmail(ctx context.Context, in *UniversityByEmailRequest, opts ...grpc.CallOption) (*UniversityResponse, error)
	GetUniversityByName(ctx context.Context, in *UniversityByNameRequest, opts ...grpc.CallOption) (*UniversityResponse, error)
}

type universityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUniversityServiceClient(cc grpc.ClientConnInterface) UniversityServiceClient {
	return &universityServiceClient{cc}
}

func (c *universityServiceClient) CreateUniversity(ctx context.Context, in *UniversityRequest, opts ...grpc.CallOption) (*UniversityResponse, error) {
	out := new(UniversityResponse)
	err := c.cc.Invoke(ctx, UniversityService_CreateUniversity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universityServiceClient) ListUniversity(ctx context.Context, in *ListUniversityRequest, opts ...grpc.CallOption) (*ListUniversityResponse, error) {
	out := new(ListUniversityResponse)
	err := c.cc.Invoke(ctx, UniversityService_ListUniversity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universityServiceClient) UpdateUniversity(ctx context.Context, in *UniversityRequest, opts ...grpc.CallOption) (*UniversityResponse, error) {
	out := new(UniversityResponse)
	err := c.cc.Invoke(ctx, UniversityService_UpdateUniversity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universityServiceClient) DeleteUniversity(ctx context.Context, in *UniversityRequest, opts ...grpc.CallOption) (*UniversityResponse, error) {
	out := new(UniversityResponse)
	err := c.cc.Invoke(ctx, UniversityService_DeleteUniversity_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universityServiceClient) GetUniversityById(ctx context.Context, in *UniversityByIdRequest, opts ...grpc.CallOption) (*UniversityResponse, error) {
	out := new(UniversityResponse)
	err := c.cc.Invoke(ctx, UniversityService_GetUniversityById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universityServiceClient) GetUniversityByEmail(ctx context.Context, in *UniversityByEmailRequest, opts ...grpc.CallOption) (*UniversityResponse, error) {
	out := new(UniversityResponse)
	err := c.cc.Invoke(ctx, UniversityService_GetUniversityByEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *universityServiceClient) GetUniversityByName(ctx context.Context, in *UniversityByNameRequest, opts ...grpc.CallOption) (*UniversityResponse, error) {
	out := new(UniversityResponse)
	err := c.cc.Invoke(ctx, UniversityService_GetUniversityByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UniversityServiceServer is the server API for UniversityService service.
// All implementations must embed UnimplementedUniversityServiceServer
// for forward compatibility
type UniversityServiceServer interface {
	CreateUniversity(context.Context, *UniversityRequest) (*UniversityResponse, error)
	ListUniversity(context.Context, *ListUniversityRequest) (*ListUniversityResponse, error)
	UpdateUniversity(context.Context, *UniversityRequest) (*UniversityResponse, error)
	DeleteUniversity(context.Context, *UniversityRequest) (*UniversityResponse, error)
	GetUniversityById(context.Context, *UniversityByIdRequest) (*UniversityResponse, error)
	GetUniversityByEmail(context.Context, *UniversityByEmailRequest) (*UniversityResponse, error)
	GetUniversityByName(context.Context, *UniversityByNameRequest) (*UniversityResponse, error)
	mustEmbedUnimplementedUniversityServiceServer()
}

// UnimplementedUniversityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUniversityServiceServer struct {
}

func (UnimplementedUniversityServiceServer) CreateUniversity(context.Context, *UniversityRequest) (*UniversityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUniversity not implemented")
}
func (UnimplementedUniversityServiceServer) ListUniversity(context.Context, *ListUniversityRequest) (*ListUniversityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUniversity not implemented")
}
func (UnimplementedUniversityServiceServer) UpdateUniversity(context.Context, *UniversityRequest) (*UniversityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUniversity not implemented")
}
func (UnimplementedUniversityServiceServer) DeleteUniversity(context.Context, *UniversityRequest) (*UniversityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUniversity not implemented")
}
func (UnimplementedUniversityServiceServer) GetUniversityById(context.Context, *UniversityByIdRequest) (*UniversityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUniversityById not implemented")
}
func (UnimplementedUniversityServiceServer) GetUniversityByEmail(context.Context, *UniversityByEmailRequest) (*UniversityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUniversityByEmail not implemented")
}
func (UnimplementedUniversityServiceServer) GetUniversityByName(context.Context, *UniversityByNameRequest) (*UniversityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUniversityByName not implemented")
}
func (UnimplementedUniversityServiceServer) mustEmbedUnimplementedUniversityServiceServer() {}

// UnsafeUniversityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UniversityServiceServer will
// result in compilation errors.
type UnsafeUniversityServiceServer interface {
	mustEmbedUnimplementedUniversityServiceServer()
}

func RegisterUniversityServiceServer(s grpc.ServiceRegistrar, srv UniversityServiceServer) {
	s.RegisterService(&UniversityService_ServiceDesc, srv)
}

func _UniversityService_CreateUniversity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UniversityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversityServiceServer).CreateUniversity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UniversityService_CreateUniversity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversityServiceServer).CreateUniversity(ctx, req.(*UniversityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniversityService_ListUniversity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUniversityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversityServiceServer).ListUniversity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UniversityService_ListUniversity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversityServiceServer).ListUniversity(ctx, req.(*ListUniversityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniversityService_UpdateUniversity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UniversityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversityServiceServer).UpdateUniversity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UniversityService_UpdateUniversity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversityServiceServer).UpdateUniversity(ctx, req.(*UniversityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniversityService_DeleteUniversity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UniversityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversityServiceServer).DeleteUniversity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UniversityService_DeleteUniversity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversityServiceServer).DeleteUniversity(ctx, req.(*UniversityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniversityService_GetUniversityById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UniversityByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversityServiceServer).GetUniversityById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UniversityService_GetUniversityById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversityServiceServer).GetUniversityById(ctx, req.(*UniversityByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniversityService_GetUniversityByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UniversityByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversityServiceServer).GetUniversityByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UniversityService_GetUniversityByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversityServiceServer).GetUniversityByEmail(ctx, req.(*UniversityByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UniversityService_GetUniversityByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UniversityByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UniversityServiceServer).GetUniversityByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UniversityService_GetUniversityByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UniversityServiceServer).GetUniversityByName(ctx, req.(*UniversityByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UniversityService_ServiceDesc is the grpc.ServiceDesc for UniversityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UniversityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UniversityService",
	HandlerType: (*UniversityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUniversity",
			Handler:    _UniversityService_CreateUniversity_Handler,
		},
		{
			MethodName: "ListUniversity",
			Handler:    _UniversityService_ListUniversity_Handler,
		},
		{
			MethodName: "UpdateUniversity",
			Handler:    _UniversityService_UpdateUniversity_Handler,
		},
		{
			MethodName: "DeleteUniversity",
			Handler:    _UniversityService_DeleteUniversity_Handler,
		},
		{
			MethodName: "GetUniversityById",
			Handler:    _UniversityService_GetUniversityById_Handler,
		},
		{
			MethodName: "GetUniversityByEmail",
			Handler:    _UniversityService_GetUniversityByEmail_Handler,
		},
		{
			MethodName: "GetUniversityByName",
			Handler:    _UniversityService_GetUniversityByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cmd/proto/university.proto",
}
